
Jag har inte lyckats få tillgång till en gratis-period hos azure. Råkade registrera med skolmailen och uddevalla kommuns organisation accepterar inte ett inlogg på azure. 
Jag har varit i kontakt med azure men de kan tyvärr inte hjälpa mig och jag får inte skapat ett annat gratiskonto. Därav ligger inte det upplagt på azure. 


Jag valde att prova att använda Spectre.Console för att skapa och hantera GUI lite lättare. 
Lärdomen av det är att det är dumt att göra det när man i stort sett skrivit klart layouten för programmet. 
Det ställde till det mer än väntat så därför backade jag till att bara använda mer simpla basfunktioner och inte implementerat spectre.console i alla menyer. 
Det är dock en intressant och bra lösning för att skapa GUI i C# och jag kommer nog att använda det i framtida projekt.
Syntaxen när man skriver påminner lite om lambda och även en blandning av css/html för att styla text.
Länk till sidan för nuget och info: 
https://spectreconsole.net/  

Jag har även lagt till BCrypt.Net-next för att hantera hashning av lösenord som görs vid registrering och inloggning.
https://learn.microsoft.com/en-us/answers/questions/939712/how-do-i-check-the-password-entered-by-the-user-bc?page=2#answers

Programmet är skrivet Async hela vägen. Det kan finnas någon enstaka synkron metod som jag missat. Alternativt någon metod som inte har en await och därför är synkron. 

Databasen är uppbyggt med Code-First med virtual för lazy loading.
Men för att göra det tydligare för mig själv och förstå vad som händer så har jag använt mig av include() för hämta datan. (eager loading).
Jag upplevde att det va lite svårt att förstå hur det hängde ihop när jag bara använde lazy loading.
Så för tränings skull och för att göra det tydligare så blev det såhär. 




Jag implementerade Dependency Injection i projektet för att hantera tjänster och beroenden mellan objekt samt deras livslängd.
Det är en bra metod för att separera ansvar och göra koden mer testbar och underhållbar.
Det är också en bra metod för att hantera beroenden mellan olika delar av applikationen.
Passar en applikation byggd med flera lager.
Dependency Injection är ett steg i rätt riktning för att följa SOLID-principerna, särskilt Single Responsibility Principle (SRP) och Dependency Inversion Principle (DIP).

https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-9.0
https://learn.microsoft.com/dotnet/core/extensions/dependency-injection#service-lifetimes
länk till sida för depenci injection och hantering av tjänstlivslängden av varje scope. 

efter att ha pratat med Mikael började jag kika på dto och funktionerna till Data Transfer Object.
DTO används primärt för att avskilja affärslogik från datamodellen och för att optimera dataöverföringen mellan klient och server.
DTO:er kan också användas för att minska antalet anrop till servern genom att skicka mer data i ett enda anrop, vilket kan förbättra prestanda och minska latens.
DTO:er är också användbara för att skapa en tydlig gränssnitt mellan olika lager i applikationen, vilket kan underlätta testning och underhåll.
https://learn.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5

Jag började att smått implementera några enstaka DTO's och skapade även två klasser för att kunna uppdatera och lägga till data via DTO.
Jag valde att prova på dem lättaste och mest grundläggande klasserna för att se hur det skulle fungera.
Upptäckte dock att det blev väldigt mycket att bygga om när man implementerar det så här sent, så nöjer mig med det lilla jag fått till. 
Product DTO är helt klar, men Suppleir och productcategory har också fått varsina dto metoder.
Allt är uppdaterat i UI så att inga anrop körs mot de gamla metoderna utan mot de nya DTO metoderna.

Saker att ta med sig från projektet:
1. Börja inte bygga för mycket innan man kör programmet. Använd MVP(minimum viable product) och börja testa och bygg sedan ut. 
- Blev lite svårhanterligt när jag hade byggt hela baksidan utan att ha testat något och stod dessutom kvar med en del metoder som inte användes.
2. Att uppdatera UI/GUI med ett för mig nytt nugetpaketm sent in är ingen kanonídé. 
-Tog väldigt många timmar att bara lära sig skriva det och sen få det att fungera. Det va lite mer att ändra än jag väntade mig. 
3.Async/Await är kanon. 
-När man väl landat i hur det fungerar och hur man skriver det på rätt sätt så är det högst effektivt. 
Enda nackdelen jag kan uppleva är att det ibland kan krocka lite med utskrifterna och när/vart dem leveras ut i konsollen.
4.Lärorikt att implementera interfaces och Dependency Injection.
- Det var väldigt lärorikt att implementera DI för att sedan slippa öppna nya instanser av DbContext i varje klass som behövde det.
5.DTO's
- Det tog ett tag innan jag förstod konverteringen av objekt från enititet till dto-objekt. Men när jag väl förstod vad som behövdes i metoderna för att göra det
så blev det väldigt tydligt och enkelt att använda. 
Svårast med DTO-hantering va mappningen av dton när man skulle uppdatera eller skapa ett databasobjekt. Istället för att direkt sätta input-värdena till entitetens värde 
så behövde dton sköta inputhanteringen och sen mappas till entiteten.






