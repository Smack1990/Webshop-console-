

Jag valde att prova att använda Spectre.Console för att skapa och hantera GUI lite lättare. 
Lärdomen av det är att det är dumt att göra det när man i stort sett skrivit klart layouten för programmet. 
Det ställde till det mer än väntat så därför backade jag till att bara använda mer simpla basfunktioner och inte implementerat spectre.console i alla menyer. 
Det är dock en intressant och bra lösning för att skapa GUI i C# och jag kommer nog att använda det i framtida projekt.
Syntaxen när man skriver påminner lite om lambda och även en blandning av css/html för att styla text.
Länk till sidan för nuget och info: 
https://spectreconsole.net/  

Jag har även lagt till BCrypt.Net-next för att hantera hashning av lösenord som görs vid registrering och inloggning.
https://learn.microsoft.com/en-us/answers/questions/939712/how-do-i-check-the-password-entered-by-the-user-bc?page=2#answers

Programmet är skrivet Async hela vägen. Det kan finnas någon synkron metod som jag missat. Alternativt någon metod som inte har en await och därför är synkron. 

Databasen är uppbyggt med Code-First med virtual för lazy loading.
Men för att göra det tydligare för mig själv och förstå vad som händer så har jag använt mig av include() i för hämta datan. (eager loading).
Jag upplevde att det va lite svårt att förstå hur det hängde ihop när jag bara använde lazy loading.
Så för tränings skull och för att göra det tydligare så blev det såhär. 



Saker att ta med sig från projektet:
1. Börja inte bygga för mycket innan man kör programmet. Använd MVP(minimum viable product) och börja testa och bygg sedan ut. 
- Blev lite svårhanterligt när jag hade byggt hela baksidan utan att ha testat något och stod dessutom kvar med en del metoder som inte användes.
2. Att uppdatera UI/GUI med ett för mig nytt nugetpaket sent in är ingen kanonídé. 
-Tog väldigt många timmar att bara hantera och få det att fungera. Det va lite mer att ändra än jag väntade mig. 
3.Async/Await är kanon. 
-När man väl landat i hur det fungerar och hur man skriver det på rätt sätt så är det högst effektivt. 
Enda nackdelen jag kan uppleva är att det ibland kan krocka lite med utskrifterna och när/vart dem leveras ut i konsollen.
4.


https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-9.0
https://learn.microsoft.com/dotnet/core/extensions/dependency-injection#service-lifetimes
länk till sida för depenci injection och hantering av tjänstlivslängden av varje scope. 



